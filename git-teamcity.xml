<?xml version="1.0" encoding="UTF-8"?>
<project name="git-teamcity" default="all">
  
  
  <property file="git-teamcity.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
    <exclude name="**/*.orig/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.ear"/>
    <include name="*.apk"/>
    <include name="*.zip"/>
    <include name="*.swc"/>
    <include name="*.ane"/>
    <include name="*.egg"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
    <include name="**/?*.jsp"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.6" value="${jdk.home.1.6}/bin"/>
  <path id="jdk.classpath.1.6">
    <fileset dir="${jdk.home.1.6}">
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.6}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.6}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.6"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.jgit.classpath">
    <pathelement location="${basedir}/lib/common/org.eclipse.jgit-2.1.0-SNAPSHOT.jar"/>
  </path>
  
  <path id="library.jsch-0.1.44.classpath">
    <pathelement location="${basedir}/lib/common/jsch-0.1.44.jar"/>
  </path>
  
  <path id="library.teamcity_agent.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/buildAgent/lib/agent.jar"/>
  </path>
  
  <path id="library.teamcity_open_api_agent.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/agent-api.jar"/>
  </path>
  
  <path id="library.teamcity_open_api_common.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/common-api.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/commons-codec-1.3.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/log4j-1.2.12.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/trove4j.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/xmlrpc-2.0.1.jar"/>
  </path>
  
  <path id="library.teamcity_open_api_server.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/server-api.jar"/>
  </path>
  
  <path id="library.teamcity_server.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/server.jar"/>
  </path>
  
  <path id="library.teamcity_tests.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/tests/patches-test.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/tests/tests-support.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/patches-impl.jar"/>
  </path>
  
  <path id="library.teamcity_third-party.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/annotations.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/openapi.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/spring-webmvc.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/spring.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/util.jar"/>
  </path>
  
  <path id="library.testlibs.classpath">
    <fileset dir="${basedir}/git-tests/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.tomcat.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/lib/servlet-api.jar"/>
  </path>
  
  <path id="library.trilead_ssh.classpath">
    <pathelement location="${basedir}/lib/agent/trilead-ssh2.jar"/>
  </path>
  
  
  <!-- Application Server Libraries -->
  
  <!-- Modules -->
  
  
  <!-- Module git-common -->
  
  <dirname property="module.git-common.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.git-common" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.git-common" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.git-common" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.git-common" value="${compiler.args}"/>
  
  <property name="git-common.output.dir" value="${module.git-common.basedir}/out/production/git-common"/>
  <property name="git-common.testoutput.dir" value="${module.git-common.basedir}/out/test/git-common"/>
  
  <path id="git-common.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="git-common.module.production.classpath">
    <path refid="${module.jdk.classpath.git-common}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-common.runtime.production.module.classpath">
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-common.module.classpath">
    <path refid="${module.jdk.classpath.git-common}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-common.runtime.module.classpath">
    <pathelement location="${git-common.testoutput.dir}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.git-common">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.git-common">
    <patternset refid="excluded.from.module.git-common"/>
  </patternset>
  
  <path id="git-common.module.sourcepath">
    <dirset dir="${module.git-common.basedir}/git-common">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.git-common" depends="compile.module.git-common.production,compile.module.git-common.tests" description="Compile module git-common"/>
  
  <target name="compile.module.git-common.production" description="Compile module git-common; production classes">
    <mkdir dir="${git-common.output.dir}"/>
    <javac destdir="${git-common.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.git-common}/javac">
      <compilerarg line="${compiler.args.git-common}"/>
      <bootclasspath refid="git-common.module.bootclasspath"/>
      <classpath refid="git-common.module.production.classpath"/>
      <src refid="git-common.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.git-common"/>
    </javac>
    
    <copy todir="${git-common.output.dir}">
      <fileset dir="${module.git-common.basedir}/git-common/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.git-common.tests" depends="compile.module.git-common.production" description="compile module git-common; test classes" unless="skip.tests"/>
  
  <target name="clean.module.git-common" description="cleanup module">
    <delete dir="${git-common.output.dir}"/>
    <delete dir="${git-common.testoutput.dir}"/>
  </target>
  
  
  <!-- Module root -->
  
  <dirname property="module.root.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.root" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.root" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.root" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.root" value="${compiler.args}"/>
  
  <property name="root.output.dir" value="${module.root.basedir}/out/production/root"/>
  <property name="root.testoutput.dir" value="${module.root.basedir}/out/test/root"/>
  
  <path id="root.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="root.module.production.classpath">
    <path refid="${module.jdk.classpath.root}"/>
  </path>
  
  <path id="root.runtime.production.module.classpath">
    <pathelement location="${root.output.dir}"/>
  </path>
  
  <path id="root.module.classpath">
    <path refid="${module.jdk.classpath.root}"/>
    <pathelement location="${root.output.dir}"/>
  </path>
  
  <path id="root.runtime.module.classpath">
    <pathelement location="${root.testoutput.dir}"/>
    <pathelement location="${root.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.root">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.root">
    <patternset refid="excluded.from.module.root"/>
  </patternset>
  
  
  <target name="compile.module.root" depends="compile.module.root.production,compile.module.root.tests" description="Compile module root"/>
  
  <target name="compile.module.root.production" description="Compile module root; production classes"/>
  
  <target name="compile.module.root.tests" depends="compile.module.root.production" description="compile module root; test classes" unless="skip.tests"/>
  
  <target name="clean.module.root" description="cleanup module">
    <delete dir="${root.output.dir}"/>
    <delete dir="${root.testoutput.dir}"/>
  </target>
  
  
  <!-- Module git-agent -->
  
  <dirname property="module.git-agent.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.git-agent" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.git-agent" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.git-agent" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.git-agent" value="${compiler.args}"/>
  
  <property name="git-agent.output.dir" value="${module.git-agent.basedir}/out/production/git-agent"/>
  <property name="git-agent.testoutput.dir" value="${module.git-agent.basedir}/out/test/git-agent"/>
  
  <path id="git-agent.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="git-agent.module.production.classpath">
    <path refid="${module.jdk.classpath.git-agent}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.trilead_ssh.classpath"/>
    <path refid="library.teamcity_agent.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-agent.runtime.production.module.classpath">
    <pathelement location="${git-agent.output.dir}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.jgit.classpath"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.trilead_ssh.classpath"/>
    <path refid="library.teamcity_agent.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
  </path>
  
  <path id="git-agent.module.classpath">
    <path refid="${module.jdk.classpath.git-agent}"/>
    <pathelement location="${git-agent.output.dir}"/>
    <pathelement location="${git-common.testoutput.dir}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.trilead_ssh.classpath"/>
    <path refid="library.teamcity_agent.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-agent.runtime.module.classpath">
    <pathelement location="${git-agent.testoutput.dir}"/>
    <pathelement location="${git-agent.output.dir}"/>
    <pathelement location="${git-common.testoutput.dir}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.jgit.classpath"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.trilead_ssh.classpath"/>
    <path refid="library.teamcity_agent.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.git-agent">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.git-agent">
    <patternset refid="excluded.from.module.git-agent"/>
  </patternset>
  
  <path id="git-agent.module.sourcepath">
    <dirset dir="${module.git-agent.basedir}/git-agent">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.git-agent" depends="compile.module.git-agent.production,compile.module.git-agent.tests" description="Compile module git-agent"/>
  
  <target name="compile.module.git-agent.production" depends="compile.module.git-common" description="Compile module git-agent; production classes">
    <mkdir dir="${git-agent.output.dir}"/>
    <javac destdir="${git-agent.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.git-agent}/javac">
      <compilerarg line="${compiler.args.git-agent}"/>
      <bootclasspath refid="git-agent.module.bootclasspath"/>
      <classpath refid="git-agent.module.production.classpath"/>
      <src refid="git-agent.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.git-agent"/>
    </javac>
    
    <copy todir="${git-agent.output.dir}">
      <fileset dir="${module.git-agent.basedir}/git-agent/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.git-agent.tests" depends="compile.module.git-agent.production" description="compile module git-agent; test classes" unless="skip.tests"/>
  
  <target name="clean.module.git-agent" description="cleanup module">
    <delete dir="${git-agent.output.dir}"/>
    <delete dir="${git-agent.testoutput.dir}"/>
  </target>
  
  
  <!-- Module git-server -->
  
  <dirname property="module.git-server.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.git-server" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.git-server" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.git-server" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.git-server" value="${compiler.args}"/>
  
  <property name="git-server.output.dir" value="${module.git-server.basedir}/out/production/git-server"/>
  <property name="git-server.testoutput.dir" value="${module.git-server.basedir}/out/test/git-server"/>
  
  <path id="git-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="git-server.module.production.classpath">
    <path refid="${module.jdk.classpath.git-server}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.tomcat.classpath"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_server.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-server.runtime.production.module.classpath">
    <pathelement location="${git-server.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.tomcat.classpath"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.jgit.classpath"/>
    <path refid="library.teamcity_server.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
  </path>
  
  <path id="git-server.module.classpath">
    <path refid="${module.jdk.classpath.git-server}"/>
    <pathelement location="${git-server.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.tomcat.classpath"/>
    <pathelement location="${git-common.testoutput.dir}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.teamcity_server.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-server.runtime.module.classpath">
    <pathelement location="${git-server.testoutput.dir}"/>
    <pathelement location="${git-server.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.tomcat.classpath"/>
    <pathelement location="${git-common.testoutput.dir}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.jgit.classpath"/>
    <path refid="library.teamcity_server.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.git-server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.git-server">
    <patternset refid="excluded.from.module.git-server"/>
  </patternset>
  
  <path id="git-server.module.sourcepath">
    <dirset dir="${module.git-server.basedir}/git-server">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.git-server" depends="compile.module.git-server.production,compile.module.git-server.tests" description="Compile module git-server"/>
  
  <target name="compile.module.git-server.production" depends="compile.module.git-common" description="Compile module git-server; production classes">
    <mkdir dir="${git-server.output.dir}"/>
    <javac destdir="${git-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.git-server}/javac">
      <compilerarg line="${compiler.args.git-server}"/>
      <bootclasspath refid="git-server.module.bootclasspath"/>
      <classpath refid="git-server.module.production.classpath"/>
      <src refid="git-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.git-server"/>
    </javac>
    
    <copy todir="${git-server.output.dir}">
      <fileset dir="${module.git-server.basedir}/git-server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.git-server.basedir}/git-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.git-server.tests" depends="compile.module.git-server.production" description="compile module git-server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.git-server" description="cleanup module">
    <delete dir="${git-server.output.dir}"/>
    <delete dir="${git-server.testoutput.dir}"/>
  </target>
  
  
  <!-- Module git-tests -->
  
  <dirname property="module.git-tests.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.git-tests" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.git-tests" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.git-tests" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.git-tests" value="${compiler.args}"/>
  
  <property name="git-tests.output.dir" value="${module.git-tests.basedir}/out/production/git-tests"/>
  <property name="git-tests.testoutput.dir" value="${module.git-tests.basedir}/out/test/git-tests"/>
  
  <path id="git-tests.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="git-tests.module.production.classpath">
    <path refid="${module.jdk.classpath.git-tests}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.testlibs.classpath"/>
    <pathelement location="${git-server.output.dir}"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.tomcat.classpath"/>
    <path refid="library.teamcity_tests.classpath"/>
    <pathelement location="${git-common.output.dir}"/>
    <pathelement location="${git-agent.output.dir}"/>
    <path refid="library.teamcity_agent.classpath"/>
    <path refid="library.teamcity_server.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-tests.runtime.production.module.classpath">
    <pathelement location="${git-tests.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.testlibs.classpath"/>
    <pathelement location="${git-server.output.dir}"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.tomcat.classpath"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.jgit.classpath"/>
    <path refid="library.teamcity_server.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_tests.classpath"/>
    <pathelement location="${git-agent.output.dir}"/>
    <path refid="library.trilead_ssh.classpath"/>
    <path refid="library.teamcity_agent.classpath"/>
  </path>
  
  <path id="git-tests.module.classpath">
    <path refid="${module.jdk.classpath.git-tests}"/>
    <pathelement location="${git-tests.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.testlibs.classpath"/>
    <pathelement location="${git-server.testoutput.dir}"/>
    <pathelement location="${git-server.output.dir}"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.tomcat.classpath"/>
    <path refid="library.teamcity_tests.classpath"/>
    <pathelement location="${git-common.testoutput.dir}"/>
    <pathelement location="${git-common.output.dir}"/>
    <pathelement location="${git-agent.testoutput.dir}"/>
    <pathelement location="${git-agent.output.dir}"/>
    <path refid="library.teamcity_agent.classpath"/>
    <path refid="library.teamcity_server.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
    <path refid="library.jgit.classpath"/>
  </path>
  
  <path id="git-tests.runtime.module.classpath">
    <pathelement location="${git-tests.testoutput.dir}"/>
    <pathelement location="${git-tests.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.testlibs.classpath"/>
    <pathelement location="${git-server.testoutput.dir}"/>
    <pathelement location="${git-server.output.dir}"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_third-party.classpath"/>
    <path refid="library.tomcat.classpath"/>
    <pathelement location="${git-common.testoutput.dir}"/>
    <pathelement location="${git-common.output.dir}"/>
    <path refid="library.jgit.classpath"/>
    <path refid="library.teamcity_server.classpath"/>
    <path refid="library.jsch-0.1.44.classpath"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_tests.classpath"/>
    <pathelement location="${git-agent.testoutput.dir}"/>
    <pathelement location="${git-agent.output.dir}"/>
    <path refid="library.trilead_ssh.classpath"/>
    <path refid="library.teamcity_agent.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.git-tests">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.git-tests">
    <patternset refid="excluded.from.module.git-tests"/>
  </patternset>
  
  <path id="git-tests.module.sourcepath">
    <dirset dir="${module.git-tests.basedir}/git-tests">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.git-tests" depends="compile.module.git-tests.production,compile.module.git-tests.tests" description="Compile module git-tests"/>
  
  <target name="compile.module.git-tests.production" depends="compile.module.git-server,compile.module.git-common,compile.module.git-agent" description="Compile module git-tests; production classes">
    <mkdir dir="${git-tests.output.dir}"/>
    <javac destdir="${git-tests.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.git-tests}/javac">
      <compilerarg line="${compiler.args.git-tests}"/>
      <bootclasspath refid="git-tests.module.bootclasspath"/>
      <classpath refid="git-tests.module.production.classpath"/>
      <src refid="git-tests.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.git-tests"/>
    </javac>
    
    <copy todir="${git-tests.output.dir}">
      <fileset dir="${module.git-tests.basedir}/git-tests/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.git-tests.tests" depends="compile.module.git-tests.production" description="compile module git-tests; test classes" unless="skip.tests"/>
  
  <target name="clean.module.git-tests" description="cleanup module">
    <delete dir="${git-tests.output.dir}"/>
    <delete dir="${git-tests.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.git-common, clean.module.root, clean.module.git-agent, clean.module.git-server, clean.module.git-tests" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.git-common, compile.module.root, compile.module.git-agent, compile.module.git-server, compile.module.git-tests" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>